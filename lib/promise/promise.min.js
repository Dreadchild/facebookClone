(function() {
  var deferFunc = this.nextTick ? this.nextTick : this.setImmediate ? this.setImmediate : function(func) {
		setTimeout(func, 0);
	}, doResolve = function(default_action, next, callback, value) {
		if ("function" != typeof callback) return next[default_action](value);
		try {
			var ret = callback(value);
			ret && "function" == typeof ret.then ? ret.then(function(value) {
				next.resolve(value);
			}, function(reason) {
				next.reject(reason);
			}) : next.resolve(ret);
		} catch (e) {
			next.reject(e);
		}
	}, Deferred = function() {
		this.next = [];
	};
	Deferred.prototype.then = function(onResolved, onRejected) {
		var next = new Deferred();
		return this.next.push([ next, onResolved, onRejected ]), next;
	}, Deferred.prototype.resolve = function(value) {
		if (this.then == Deferred.prototype.then) {
			this.then = Resolved.prototype.then, this.value = value;
			for (var l = this.next.length, i = 0; l > i; i++)
				doResolve("resolve", this.next[i][0], this.next[i][1], value);
		}
	}, Deferred.prototype.reject = function(reason) {
		if (this.then == Deferred.prototype.then) {
			this.then = Rejected.prototype.then, this.reason = reason;
			for (var l = this.next.length, i = 0; l > i; i++)
				doResolve("reject", this.next[i][0], this.next[i][2], reason);
		}
	};
	var Resolved = function(value) {
		this.value = value;
	};
	Resolved.prototype = new Deferred(),
	Resolved.prototype.then = function(onResolved) {
		var next = new Deferred(), value = this.value;
		return deferFunc(function() {
			doResolve("resolve", next, onResolved, value);
		}), next;
	};
	var Rejected = function(reason) {
		this.reason = reason;
	};
	Rejected.prototype = new Deferred(),
	Rejected.prototype.then = function(_, onRejected) {
		var next = new Deferred(), reason = this.reason;
		return deferFunc(function() {
			doResolve("reject", next, onRejected, reason);
		}), next;
	};
	Deferred.Resolved = Resolved, Deferred.Rejected = Rejected,
	"undefined" != typeof module ? module.exports = Deferred : this.Promise = Deferred;
}).call(this);